// Copyright (C) 2024 [Kulpreet Singh]
//
//  This file is part of P2Poolv2
//
// P2Poolv2 is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// P2Poolv2 is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// P2Poolv2. If not, see <https://www.gnu.org/licenses/>.

use crate::node::Message;
#[mockall_double::double]
use crate::shares::chain::actor::ChainHandle;
use libp2p::gossipsub;
use tracing::{error, info};

/// Handle gossipsub events, these are events that are generated by the gossipsub protocol
/// We need to handle all events that can be gossiped. Currently, we gossip:
/// 1. Workbase(MinerWorkbase)
/// 2. UserWorkbase(UserWorkbase)
/// 3. MiningShare(ShareBlock)
pub async fn handle_gossipsub_event(event: gossipsub::Event, chain_handle: ChainHandle) {
    info!("Gossipsub event: {:?}", event);
    match event {
        gossipsub::Event::Message {
            propagation_source: _,
            message_id: _,
            message,
        } => {
            let message = Message::cbor_deserialize(&message.data).unwrap();
            tokio::spawn(async move {
                handle_gossip_message(message, chain_handle).await;
            });
        }
        gossipsub::Event::Subscribed { peer_id: _, topic } => {
            info!("Subscribed to topic: {:?}", topic);
        }
        gossipsub::Event::Unsubscribed { peer_id: _, topic } => {
            info!("Unsubscribed from topic: {:?}", topic);
        }
        gossipsub::Event::GossipsubNotSupported { .. } => {
            info!("Gossipsub not supported");
        }
    }
}

async fn handle_gossip_message(message: Message, chain_handle: ChainHandle) {
    info!("Handling gossip message: {:?}", message);
    match message {
        Message::Workbase(workbase) => {
            info!("Handling workbase: {:?}", workbase);
            if let Err(e) = chain_handle.add_workbase(workbase).await {
                error!("Failed to add workbase: {}", e);
            }
        }
        Message::UserWorkbase(user_workbase) => {
            info!("Handling user workbase: {:?}", user_workbase);
            if let Err(e) = chain_handle.store_user_workbase(user_workbase).await {
                error!("Failed to store user workbase: {}", e);
            }
        }
        Message::MiningShare(mining_share) => {
            info!("Handling mining share: {:?}", mining_share);
            if let Err(e) = chain_handle.add_share(mining_share).await {
                error!("Failed to add share: {}", e);
            }
        }
        _ => {
            info!(
                "Ignoring gossip message that should not have been received: {:?}",
                message
            );
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::shares::miner_message::{CkPoolMessage, MinerWorkbase, UserWorkbase};
    use crate::test_utils::TestBlockBuilder;

    #[tokio::test]
    async fn test_handle_gossip_message_workbase() {
        let mut mock_chain = ChainHandle::default();

        let json_str = include_str!("../../tests/test_data/simple_miner_workbase.json");
        let workbase: MinerWorkbase = serde_json::from_str(&json_str).unwrap();

        mock_chain
            .expect_add_workbase()
            .with(mockall::predicate::eq(workbase.clone()))
            .times(1)
            .returning(|_| Ok(()));

        handle_gossip_message(Message::Workbase(workbase), mock_chain).await;
    }

    #[tokio::test]
    async fn test_handle_gossip_message_user_workbase() {
        let mut mock_chain = ChainHandle::default();

        let json_str = include_str!("../../tests/test_data/validation/userworkbases.json");
        let userworkbases: Vec<CkPoolMessage> = serde_json::from_str(&json_str).unwrap();
        let user_workbases = userworkbases
            .into_iter()
            .filter_map(|msg| match msg {
                CkPoolMessage::UserWorkbase(w) => Some(w),
                _ => None,
            })
            .collect::<Vec<UserWorkbase>>();
        let user_workbase = user_workbases[0].clone();

        mock_chain
            .expect_store_user_workbase()
            .with(mockall::predicate::eq(user_workbase.clone()))
            .times(1)
            .returning(|_| Ok(()));

        handle_gossip_message(Message::UserWorkbase(user_workbase), mock_chain).await;
    }

    #[tokio::test]
    async fn test_handle_gossip_message_mining_share() {
        let mut mock_chain = ChainHandle::default();

        let share_block = TestBlockBuilder::new()
            .blockhash("00".repeat(32).as_str())
            .prev_share_blockhash("00".repeat(32).as_str())
            .build();

        mock_chain
            .expect_add_share()
            .with(mockall::predicate::eq(share_block.clone()))
            .times(1)
            .returning(|_| Ok(()));

        handle_gossip_message(Message::MiningShare(share_block), mock_chain).await;
    }
}
